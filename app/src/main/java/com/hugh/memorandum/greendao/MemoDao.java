package com.hugh.memorandum.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hugh.memorandum.bean.Memo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMO".
*/
public class MemoDao extends AbstractDao<Memo, Integer> {

    public static final String TABLENAME = "MEMO";

    /**
     * Properties of entity Memo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "Id", true, "ID");
        public final static Property Content = new Property(1, String.class, "Content", false, "CONTENT");
        public final static Property CreateTime = new Property(2, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(3, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public MemoDao(DaoConfig config) {
        super(config);
    }
    
    public MemoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMO\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Id
                "\"CONTENT\" TEXT," + // 1: Content
                "\"CREATE_TIME\" TEXT," + // 2: createTime
                "\"UPDATE_TIME\" TEXT);"); // 3: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Memo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(2, Content);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(4, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Memo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(2, Content);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(4, updateTime);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Memo readEntity(Cursor cursor, int offset) {
        Memo entity = new Memo( //
            cursor.getInt(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Memo entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Memo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(Memo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Memo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
